package i5.las2peer.services.videoQuiz;


import java.net.HttpURLConnection;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.Consumes;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import com.fasterxml.jackson.core.JsonProcessingException;

import i5.las2peer.api.Service;
import i5.las2peer.api.Context;
import i5.las2peer.restMapper.RESTService;
import i5.las2peer.restMapper.annotations.ServicePath;
import i5.las2peer.services.videoQuiz.database.DatabaseManager;
import java.sql.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import org.json.simple.*;
 

/**
 *
 * VideoQuizService
 *
 * This microservice was generated by the CAE (Community Application Editor). If you edit it, please
 * make sure to keep the general structure of the file and only add the body of the methods provided
 * in this main file. Private methods are also allowed, but any "deeper" functionality should be
 * outsourced to (imported) classes.
 *
 */
@ServicePath("videoquiz")
public class VideoQuiz extends RESTService {


  /*
   * Database configuration
   */
  private String jdbcDriverClassName;
  private String jdbcLogin;
  private String jdbcPass;
  private String jdbcUrl;
  private String jdbcSchema;
  private DatabaseManager dbm;



  public VideoQuiz() {
	super();
    // read and set properties values
    setFieldValues();
    // instantiate a database manager to handle database connection pooling and credentials
    dbm = new DatabaseManager(jdbcDriverClassName, jdbcLogin, jdbcPass, jdbcUrl, jdbcSchema);
  }

  @Override
  public void initResources() {
	getResourceConfig().register(RootResource.class);
  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // REST methods
  // //////////////////////////////////////////////////////////////////////////////////////

  @Api
  @SwaggerDefinition(
      info = @Info(title = "VideoQuizService", version = "4.0",
          description = "A las2peer microservice generated by the CAE.",
          termsOfService = "none",
          contact = @Contact(name = "Mario", email = "CAEAddress@gmail.com") ,
          license = @License(name = "BSD",
              url = "https://github.com/CAE-Mario/microservice-VideoQuizService/blob/master/LICENSE.txt") ) )
  @Path("/")
  public static class RootResource {

    private final VideoQuiz service = (VideoQuiz) Context.getCurrent().getService();

      /**
   * 
   * GetQuiz
   * 
   * @param id a String 
   * 
   * @return Response  
   * 
   */
  @GET
  @Path("/getQuiz/{id}")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.TEXT_PLAIN)
  @ApiResponses(value = {
       @ApiResponse(code = HttpURLConnection.HTTP_OK, message = "")
  })
  @ApiOperation(value = "GetQuiz", notes = " ")
  public Response GetQuiz(@PathParam("id") String id) {
    try{ 
         Connection conn = service.dbm.getConnection();  
        PreparedStatement stmnt = conn.prepareStatement("SELECT question, videolink, answerA, answerB, answerC, answerD from Quiz where Quiz.id = " + id); 
        ResultSet rs = stmnt.executeQuery(); 
        JSONObject result = new JSONObject(); 
        while(rs.next()){ 
         result.put("question", rs.getString(1)); 
         result.put("videolink", rs.getString(2)); 
         result.put("answerA", rs.getString(3)); 
         result.put("answerB", rs.getString(4)); 
         result.put("answerC", rs.getString(5)); 
         result.put("answerD", rs.getString(6)); 
        } 
        stmnt.close(); 
        return Response.status(HttpURLConnection.HTTP_OK).entity(result.toJSONString()).build();
    } 
    catch(Exception e){ 
        JSONObject result = new JSONObject(); 
        return Response.status(HttpURLConnection.HTTP_INTERNAL_ERROR).entity(result.toJSONString()).build();
    }
  }



  }

  // //////////////////////////////////////////////////////////////////////////////////////
  // Service methods (for inter service calls)
  // //////////////////////////////////////////////////////////////////////////////////////
  
  

}
